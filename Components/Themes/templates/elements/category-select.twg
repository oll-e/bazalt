{% if element.checkboxes() %}

    {% macro menuItem(category, element, level) %}
        {% set level = level|default(0) %}

        <label class="radio" style="margin-left: {{ level*20 }}px">
            <input type="radio" data-id="{{ category.id }}" name="{{ element.name() }}[check_{{ category.id }}]"
                   value="{{ category.id }}" {% if element.value() == category.id %} checked="checked"{% endif %} />
            {{ category.title }}
        </label>
        {% for subcategory in category.Childrens %}
            {{ _self.menuItem(subcategory, element, level + 1) }}
        {% endfor %}
    {% endmacro %}



    {% set categories = category.Elements.getTree() %}
    {% for category in categories %}
        {{ _self.menuItem(category, element) }}
    {% endfor %}

{% else %}


    {% jslib 'jsTree' %}

    <style>
        .tree-wraper {
            float: left;
        }
    </style>

    <div style="float: left; width: 300px; display: none">
        <h3>{% tr %}Selected categories:{% endtr %}</h3>

        {% for category in categories %}
            <label>
                <input type="checkbox" data-id="{{ category.id }}" name="{{ element.name() }}[check_{{ category.id }}]"
                       value="{{ category.id }}" checked="checked" class="selectedCategories"
                       id="category_hidden_check_{{ category.id }}"/>
                {{ category.title }}
            </label>
        {% endfor %}
    </div>

    <div class="tree-wraper" style="width: 300px; float: left;">
        <div class="btn-group">
            <button class="btn btn-withoutcategories active">{% tr %}Without categories{% endtr %}</button>
            <button class="btn dropdown-toggle" data-toggle="dropdown">
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu">
                <li><a href="#"
                       onclick="javascript: $('#tree-container').jstree('create',-1, 'first'); return false;">{% tr %}
                    Create category{% endtr %}</a></li>
                <li class="divider"></li>
                <li><a href="#"
                       onclick="javascript: $('#tree-container').jstree('open_all', -1); return false;">{% tr %}Expand
                    all{% endtr %}</a></li>
                <li><a href="#"
                       onclick="javascript: $('#tree-container').jstree('close_all', -1); return false;">{% tr %}
                    Collapse all{% endtr %}</a></li>
            </ul>
        </div>

        <div class="clearfix"></div>
        <div id="tree-container" class="jstree-default"></div>
    </div>

    <script type="text/javascript">
    $(function () {
        var tree = $('#tree-container');

        $('.btn-withoutcategories').click(function () {
            $.bz.forms.list.elements.table.GetPage(1, 0, 'up', function (result) {
                //$('#list_categoriet').replaceWith(info);
                $($.bz.forms.list.elements.table.el).html(result);
                $.bz.forms.list.elements.table.onUpdateData();
            });
            $.jstree._reference("#tree-container").deselect_all();
            $(this).addClass('active');
            return false;
        });

        tree.jstree({
            themes:{
                theme:"bootstrap",
                url:false,
                dots:true,
                icons:true
            },
            'languages':[{% for language in languages %}"{{ language.alias }}"{% if not loop.last %}, {% endif %}{% endfor %}],

            'plugins':[ "themes", {% if element.checkboxes() %}, "checkbox", {% endif %} 'languages', "json_rpc", "ui", "crrm", "search", "hotkeys", "contextmenu", "dnd" ],

            'json_rpc' : {
                webservice : ComNewsChannel_Webservice_TreeCategories,
                root: {{ category.id }}
            },

            'contextmenu':{
                'items':{
                    "create":{
                        // The item label
                        "label":"Create",
                        // The function to execute upon a click
                        "action":function (obj) {
                            this.create(obj, 'first');
                        },
                        // All below are optional
                        "_disabled":false, // clicking the item won't do a thing
                        "_class":"class", // class is applied to the item LI node
                        "separator_before":false, // Insert a separator before the item
                        "separator_after":false, // Insert a separator after the item
                        // false or string - if does not contain `/` - used as classname
                        "icon":false
                    },
                    "rename":{
                        // The item label
                        "label":"Rename",
                        // The function to execute upon a click
                        "action":function (obj) {
                            this.rename(obj);
                        },
                        // All below are optional
                        "_disabled":false, // clicking the item won't do a thing
                        "_class":"class", // class is applied to the item LI node
                        "separator_before":false, // Insert a separator before the item
                        "separator_after":true, // Insert a separator after the item
                        // false or string - if does not contain `/` - used as classname
                        "icon":false /*,
                         "submenu"           : {
                         }*/
                    }
                }
            },
            "dnd":{
                "drop_finish":function () {
                    //alert("DROP");
                },
                "drag_check":function (data) {
                    if (data.r.attr("id") == "phtml_1") {
                        return false;
                    }
                    return {
                        after:false,
                        before:false,
                        inside:true
                    };
                },
                "drag_finish":function (data) {
                    var categoryId = $(data.r[0]).attr('id').slice(5),
                            id = $(data.o).closest('.jstree-draggable').data('id');

                    $(data.o).parents('tr:first').remove();
                    ComNewsChannel_Webservice_TreeCategories.moveProduct(id, categoryId, function () {

                    });
                }
            },
            // Using types - most of the time this is an overkill
            // Still meny people use them - here is how
            "types":{
                // I set both options to -2, as I do not need depth and children count checking
                // Those two checks may slow jstree a lot, so use only when needed
                "max_depth":-2,
                "max_children":-2,
                // I want only `drive` nodes to be root nodes 
                // This will prevent moving or creating any other type as a root node
                "valid_children":[ "drive" ],
                "types":{
                    // The default type
                    "default":{
                        // I want this type to have no children (so only leaf nodes)
                        // In my case - those are files
                        "valid_children":"none",
                        // If we specify an icon for the default type it WILL OVERRIDE the theme icons
                        "icon":{
                            "image":"./file.png"
                        }
                    },
                    // The `folder` type
                    "folder":{
                        // can have files and other folders inside of it, but NOT `drive` nodes
                        "valid_children":[ "default", "folder" ]/*,
                         "icon" : {
                         "image" : "./folder.png"
                         }*/
                    },
                    // The `drive` nodes 
                    "drive":{
                        // can have files and folders inside, but NOT other `drive` nodes
                        "valid_children":[ "default", "folder" ], /*
                         "icon" : {
                         "image" : "./root.png"
                         },*/
                        // those options prevent the functions with the same name to be used on the `drive` type nodes
                        // internally the `before` event is used
                        "start_drag":false,
                        "move_node":false,
                        "delete_node":false,
                        "remove":false
                    }
                }
            },
            // For UI & core - the nodes to initially select and open will be overwritten by the cookie plugin

            // the UI plugin - it handles selecting/deselecting/hovering nodes
            "ui":{
                // this makes the node with ID node_4 selected onload
                "initially_select":[ "node_{{ category.id }}" ]
            },
            // the core plugin - not many options here
            "core":{
                'animation':0
                // just open those two nodes up
                // as this is an AJAX enabled tree, both will be downloaded from the server
                //"initially_open" : [ "node_1" ] 
            }{% if element.checkboxes() %},
            'checkbox':{
                'two_state':true,
                'real_checkboxes':true,
                'real_checkboxes_names':function (n) {
                    return [("{{ element.name() }}[check_" + (n[0].id || Math.ceil(Math.random() * 10000)) + "]"), n[0].id.slice(5)];
                }
            }{% endif %}
        })
                .bind("create.jstree", function (e, data) {
                    var parentId = -1;
                    if (data.rslt.parent != -1) {
                        parentId = data.rslt.parent.attr("id").replace("node_", "");
                    }
                    ComNewsChannel_Webservice_TreeCategories.createNode(parentId, {{ category.id }}, data.rslt.name, data.rslt.obj.attr("rel"), function (r) {
                        if (r.status) {
                            $(data.rslt.obj).attr("id", "node_" + r.id);
                        }
                        else {
                            $.jstree.rollback(data.rlbk);
                        }
                    });
                })
                .bind("remove.jstree", function (e, data) {
                    data.rslt.obj.each(function () {
                        var id = this.id.replace("node_", "");
                        ComNewsChannel_Webservice_TreeCategories.removeNode(id, function (r) {
                            if (!r.status) {
                                data.inst.refresh();
                            }
                        });
                    });
                })
                .bind("rename.jstree", function (e, data) {
                    var id = data.rslt.obj.attr('id').replace('node_', ''),
                            lang = tree.jstree('get_lang'),
                            title = data.rslt.new_name;

                    ComNewsChannel_Webservice_TreeCategories.renameNode(id, title, lang, function (r) {
                        if (!r.status) {
                            $.jstree.rollback(data.rlbk);
                        }
                    });
                })
                .bind('move_node.jstree', function (e, data) {
                    data.rslt.o.each(function (i) {
                        var id = $(this).attr("id").replace("node_", ""),
                                isCopy = data.rslt.cy ? true : false,
                                prev = $(this).prev(),
                                prevId = null,
                                isInsert = false;

                        if (prev.size() > 0) {
                            prevId = prev.attr("id").replace("node_", "");
                        } else {
                            var parents = $(this).parents('.jstree-open, .jstree-leaf');
                            if (parents.size() > 0) {
                                var inner = $(this).parents('.jstree-open, .jstree-leaf').eq(0);
                                prevId = inner.attr("id").replace("node_", "");
                            }
                            isInsert = true;
                        }
                        ComNewsChannel_Webservice_TreeCategories.moveNode(id, prevId, isInsert, isCopy, function (r) {
                            if (!r.status) {
                                $.jstree.rollback(data.rlbk);
                            } else {
                                $(data.rslt.oc).attr("id", "node_" + r.id);
                                if (data.rslt.cy && $(data.rslt.oc).children("UL").length) {
                                    data.inst.refresh(data.inst._get_parent(data.rslt.oc));
                                }
                            }
                        });
                    });
                })
                .bind('load_node.jstree', function (e, data) {
                    $('.selectedCategories:checked').each(function () {
                        data.inst.check_node($('#node_' + $(this).data('id')));
                    });

                    return true;
                })
                .bind('change_state.jstree', function (e, data) {
                    var node = data.inst._get_node(data.rslt),
                            unchecked = data.args[1];
                    if (node) {
                        var id = node.attr('id').slice(5),
                                checkbox = $('#category_hidden_check_' + id);
                        if (unchecked) {
                            checkbox.removeAttr('checked');
                        } else {
                            checkbox.attr('checked', 'checked');
                        }
                    }
                    return true;
                }){% if not element.checkboxes() %}
                .bind('select_node.jstree', function (e, data) {
                    var id = data.rslt.obj.attr("id").replace("node_", "");
                    $.bz.forms.list.elements.table.LoadByCategory(id, function (result) {
                        //$('#list_categoriet').replaceWith(info);
                        $.bz.forms.list.elements.table.$el.html(result);
                        $.bz.forms.list.elements.table.onUpdateData();
                    });
                    $('.btn-withoutcategories').removeClass('active');
                    $.bz.forms.list.elements.table.updateData = function () {
                        var self = $.bz.forms.list.elements.table;
                        self.GetPageCategory(id, self.page, self.sortColumn, self.sortDirection, function (result) {
                            $('.tipsy').remove();
                            self.$el.html(result);
                            self.onUpdateData();
                        });
                    };
                });
        {% endif %}

        {% if selectId %}
        if ($.bz.forms.list) {
            $.bz.forms.list.elements.table.updateData = function () {
                var self = $.bz.forms.list.elements.table;
                self.GetPageCategory('{{ selectId }}', self.page, self.sortColumn, self.sortDirection, function (result) {
                    $('.tipsy').remove();
                    self.element.html(result);
                    self.onUpdateData();
                });
            };
        }
        {% endif %}
        $('body').bind('bazalt_language_change', function (e, lang) {
            tree.jstree('set_lang', lang.alias);
        });
        $('.selectedCategories').click(function () {

        });
    });
    </script>


{% endif %}